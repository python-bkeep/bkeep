#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, argparse, re, datetime, csv
import bkeep

if __name__ == "__main__":

    # argument parse
    p = argparse.ArgumentParser()

    p.add_argument(
        "--input", "-i", 
        default=None,
        help=r"bk data directory path (default: $BKINPUT)"
    )

    p.add_argument(
        "--output", "-o",
        default=None,
        help=r"where to write a output files (default: $BKOUTPUT)"
    )

    p.add_argument(
        "--endpoint", "-p",
        default="today",
        help=r"when is the calculation end point? (default: today)"
    )

    p.add_argument(
        "--calccsv", "-c",
        action="store_true", default=False,
        help=r"calculate some csv files (default: False)"
    )

    p.add_argument(
        "--entire", "-e",
        action="store_true", default=False,
        help=r"calculate for entire period (default: False)"
    )

    p.add_argument(
        "--show",
        action="store_true", default=False,
        help=r"show a figure of propotional scaled pl"
    )

    p.add_argument(
        "--save",
        default=None,
        help=r"save a figure of propotional scaled pl"
    )

    args = p.parse_args()

    # 基本変数の定義
    path = args.input if args.input else os.environ["BKINPUT"]
    bkoutput = args.output if args.output else os.environ["BKOUTPUT"]
    inpdict = bkeep.pathtract(path, "bk")
    adjdict = bkeep.pathtract(path, "adj")

    # 日付の指定 (initial data と今日の日付)
    start = min(inpdict.keys())
    if args.endpoint == "today":
        end = datetime.date.today()
    else:
        end = bkeep.strdt(args.endpoint)

    # 帳簿記入
    bk = bkeep.Bkeep(os.path.join(path, "init.json"), start)
    bk.journalize(inpdict)
    bk.journalize(adjdict, adj=True)
    bk.post()
    bk.write_ledger(os.path.join(bkoutput, "ledger.json"))

    if args.calccsv:

        # 仕訳データの出力
        bk.write_journal(os.path.join(bkoutput, "journal.csv"))

        # 月次 csv データの作成
        bk.calcSpan(bk.mkMonth(start, end))
        bk.saveSpan(os.path.join(bkoutput, "fsMonthly.csv"))

        # 週次 csv データの作成
        bk.calcSpan(bk.mkSpan(start, end))
        bk.saveSpan(os.path.join(bkoutput, "fsWeekly.csv"))

    # 試算表と FS の作成

    if args.entire:
        # 全期間を選択した場合
        bk.prepare(start, max(inpdict.keys()))
    else:
        # それ以外の場合 (月次で集計))
        bk.prepare(datetime.date(end.year, end.month, 1), end)

    # 比例縮尺 PL の表示
    if args.show or args.save:

        # psfs パッケージのインポートと初期化
        import psfs
        prop = psfs.Prop()

        # initial data の作成
        trgnm = (
            datetime.date(end.year, end.month, 1).strftime("%Y-%m-%d") +
            " ~ " +
            end.strftime("%Y-%m-%d")
        )
        prop.initial = {trgnm : {"type" : "pl"}}

        # T/B 情報の記入
        prop.initial[trgnm]["income"] = bk.tb["income"]
        prop.initial[trgnm]["expenses"] = bk.tb["expenses"]

        # title, threshold 等の設定
        prop.sub = True
        prop.threshold = 0.02
        prop.sharey = True

        # setoption と prepare
        prop.setOptions()
        prop.prepare()

        # 図の出力
        if args.show:
            prop.show()
            input("Press ENTER")
        else:
            prop.savefig(args.save)
        

    # 出力
    bk.make()
    bk.cat()
